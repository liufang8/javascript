错误处理：
	try{
		//可能导致错误的代码
	}catch(err){
		err.message //错误消息
		err.name //错误类型
		//错误发生时怎么处理
	}finally{
		//总会执行，如果前面有return，则会忽略
	}

错误类型：
	Error
	EvalError     使用eval()函数发生错误抛出,很少见
	RangeError     数值超出范围是触发
	ReferenceError 找不到对象的情况下 
	SyntaxError    语法错误 
	TypeError      访问不存在的方法,变量保存意外的类型(执行特定类型的操作，类型不符合要求)
	URIError	   使用encodeURI，decodeURI,格式不正确。很少

	Error类型是其他类型的基类，我们可以用它创建自定义的错误类型。

	处理不同的错误类型
		try{
			someFunction():
		}catch(err){
			if(err instanceof TypeError){
				//
			}else if(err instanceof ReferenceError){
				//
			}else{
				//
			}
		}

合理使用try-catch:
	最适合那些我们无法控制的错误。
	如果已经知道自己的代码会发生错误，使用try-catch就不合适了。



抛出错误：throw
	可以抛出各种类型数据。特别在编写通用函数的时候，错误发生时提供尽可能详细的信息。

	throw new Error("message");

		/*自定义错误类型*/
	function MyError(message) {
		this.name = 'myerror';
		this.message = message ? message : 'my message';
	}

	MyError.prototype = new Error();
	throw new MyError('hahaha');


Error事件：
	任何没有通过try-catch处理的错误都会触发error事件。

	window.onerror = function(message, url, line) {
		message 错误消息
		url     错误所在的url 
		line    错误所在的行号
	}

	图片也有Error事件，图片可以通过new Image();创建


if(values != null)  //只能判断values不是null或者undefined
基本类型用typeof检查，对象用instanceof
特别在面向公众api的时候，必须要对函数参数进行类型检查，以确保函数正常运行。

给URL参数添加编码
function addQueryStringArg(url, name, value) {
	if(url.indexOf("?") == -1){
		url += "?";
	}else{
		url += "&";
	}
	url += encodeURIComponent('name') + "=" + encodeURIComponent(value);
	reutn url;
}



致命错误和非致命错误：

非致命错误：看对用户的影响
	不影响用户的主要任务
	之影响页面的一部分
	可以恢复
	重复相同操作可以消除错误

发生致命错误必须提醒用户并提供相应的解决办法。

设计良好代码一部分发生错误，不应该影响不相干的代码执行
for(var i=0; i < mods.length; i++){
	try{
		mods[i].init(); //这样就不会影响不相干的代码	
	}catch(err){
		//处理
	}
}


后台记录日志

/*向后台发送日志内容*/
function logError(sev, msg){
	var img = new Image();
	img.src="serverName?sev=" + encodeURIComponent('sev') + "&msg=" + encodeURIComponent('msg');
}


将消息输出到控制台：
	error(msg) 
	warn(msg)
	info(msg)
	log(msg)
