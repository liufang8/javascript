
语法
	
	1.区分大小写
	2.标识符： （变量，函数名，属性名的命名规范）
		第一个字符必须是一个字母、下划线(_)或者美元符号($)
		第二个字符可以是字母、下划线、美元符号或者数字
		标识符采用驼峰大小写格式，也就是第一单词小写首字母，后面每个有意义的单词首字母大写。例如：myCar

	3.注释
		
		//单行注释

		/*
		 *多行注释
		 *
		 *
		 */	

	4.ES5引入严格模式（strict mode）
		严格模式为javascript定义了一种不同的解析和执行模型。在严格模型下一些不确定的行为将得到处理，对某些不安全的操作也会抛出错误。
		将"use strict"; 放到脚本开头，或者函数的开头

	5语句 
		
		语句要以分号（;）结尾	
		多条语句可以放入 {}
		if语句即便只有一条，也要使用{}


	关键字

		break	do	instanceof	typeof	case	else	new 	var	  in try
		catch	finally	retrun	void	continue	for 	switch	while
		debugger	function	this	with	default	 if   throw	delete	

		
	保留字：现在还没有特定的用途，将来可能作为关键字使用

		ES5非严格模式下保留字为：
			class enum	extends	super	const	export	import


	变量 是松散类型的，可以 用来保存任何类型的数据

		定义时要使用var 操作符，不用var 定义变量，变量会成为全局变量

		未初始化的变量 会保存一个特殊的值 undefined
		
		赋值时最好不要改变变量值的类型

	
	数据类型

		五种简单变量类型： undefined null Boolean Number String
		一种复杂的类型: Object

		typeof 是操作符 可以不用（）来操作数据， 可以检测给定数据的类型
		
			var a2 ; 				 typeof a2   //"undefined"
			var a4 = 1;     		 typeof a4   //"number"
			var a5 = true;  		 typeof a5   //"boolean"
			var a6 = "a"; 			 typeof a6   //"string"
			var a7 = function(){};   typeof a7  //"function"
			var a3 = null;  		 typeof a3   //"object"
			var a8 = {};    		 typeof a8   //"object"  //null 或者对象都是 object
			var a9 = /a/             typeof a9   //"object"

		
		undefined   是一个变量值，目的是区分空对象和未初始化变量。

			未初始化变量  未初始化变量的值，默认是undefinded
				var message;  <=>  var message = undefined;
				message == undefined        //true
				typeof message              //"undefined"

			未定义变量

				未定义的变量不能使用，alert(age); //报错
				未定义的变量  typeof age   //"undefined"

		null  如果定义的变量将来用来保存对象，最好初始化为null

			undefinded值是派生自null值的，所以  undefinded == null  //true
			undefined  === null      // false
			typeof null              //"object"

		Boolean
		
			其它值通过Boolean可以和布尔值进行转换，当需要布尔值的时候会自动转换比如if(expess)


			当运算无法返回正确的数值时，就会返回“NaN”值。NaN 值非常特殊，因为它“不是数字” 比如: 1 * 'a'
			NaN和0 通过Boolean转换都为false


		Number 使用IEEE754表示的格式表示整数和浮点数


			整数：十进制、八进制、十六进制

				十进制： var num = 1;

				八进制：以0开头，后面数字的范围为(0-7)，在严格模式下使用八进制会报错。尽量不使用八进制。
						var octalNum1 = 017   //15
						var octalNum2 = 029  //29  自动转化为十进制

				十六进制： 以0x开头，后面位（0-9）和（a-f）
						var hexNum = 0xA    // 10		


			浮点数： 数值中必须包含小数点，且小数点后面必须有一位数字。浮点数的存储空间是整数的两倍。

				var floatNum1 = 1.0  或者 1.  浮点数会自动转化为整形。

				对于极大或者极小的数可以使用科学计数法
					var floatNum = 3.125e7   等价于  31250000

				浮点数计算会产生舍入误差的问题，所以计算精度不如整数
				1 + 2 = 3  
				0.1 + 0.2 = 0.30000000000000004   //不准确


			数值范围：
				最大值  Number.MIN_VALUE 
				最小值  Number.MAX_VALUE

				如果计算结果超出范围回转换为Infinity(无穷)


			NaN:非数值一个特殊的数值。表示应该返回数值而没有返回数值的情况。
				
				使用isNaN() //判断是否是一个非数值，如果参数不是一个数值会尝试转化为数值。 比如： "10"  true
				通过Number转换  10  1 任何不能转换成数值的值都将返回true
				如果参数是对象首先调用对象的valueOf()方法，确定返回值是否可以转化为数值，
				如果不能调用对象的toString()方法，确定返回值是否可以转化为数值。这个是ECMAScript中的内置函数和操作符的一般执行流程。


			数值转换 Number()、parseInt()、parseFloat()

				Number() 把任意类型转化为数值，后面两个把字符串转化为数值
				Number(null)          // 0
				Number(undefinded)    // NaN
				Number("012")         //12 所以不要使用八进制

				parseInt('0x12')  //18  
				parseInt('12', 16)  //18 指定第二个参数，

				parseFloat('10.0')  //会转化为整数

		String 由零个或多个16位unicode字符组成的字符序列。

			特殊的字面量：

				\n        换行
				\r        回车
				\t        制表
				\b        空格
				\\        斜杠
				\"        双引号
				\'        单引号
				\xnn      十六进制代码nn表示一个字符，比如: \x41 表示A
				\unnnn    十六进制代码nnnn表示一个Unicode字符，比如： \u03a3 表示希腊字符Σ

			字符串特点
				不可以改变，要改变某个变量保存的字符串，首先销毁原来的字符串，然后变量指向新的字符串
				var lang = 'Java';
				lang = lang + 'Script';
				第二步创建一个容纳十个字符的新字符串，然后填充'Java' 和'Script',最后销毁原来字符串'Java'和'Script'


			转换为字符串
				出来null,undefined 没有toString()方法，其他的变量都有这个方法。
				String() 可以将任意类型的值转化为字符串，如果值有toStirng()方法则调用，
						如果是null  返回 'null'
						如果是undefinded 返回 'undefinded'

				如果变量是数值，toString(base) 可以带有参数,用base进制转换


		Object 是一组数据和功能的集合。

			属性和方法：
				Constructor: 保存创建对象的函数
				hasOwnProperty(propertyName: str): 给定的属性在给定的对象中是否存在。
				isPrototypeOf(object): 检查传入的对象是否是另一个对象的原型。
				propertyIsEnumerable(propertyName: str): 属性是否可以用for-in枚举
				toLocationString()； 返回对象的字符串表示，和执行环境的地区相对应
				toString(): 返回对象的字符串表示
				valueOf(): 返回对象的字符串、数值、布尔值表示。通常和toString()返回一样。
		



	操作符：
		
		一元操作符：
			 ++ --
				可以运用于任何对象，先将其转化为数字值然后加减。如果不能转化为数字值，则返回NaN
				具体规则：
					如果应用于包含有效数字的字符串时，先转化为数字值，然后加减。
					如果不包含有效数字的字符串时，将变量的值设为NaN，字符串变量变为数值变量。
					如果是false,转化为0，然后加减
					如果是true，转化为1，然后加减
					如果是对象，调用对象的valueOf()取得一个数值，然后应用前面的规则

			+ - 也会像将操作数进行转换

		位操作符：
			内存中存储的数值是有符号的，最后一位是符号位，0表示整数；1表示负数。
			存储的是补码的形式，正数的补码本身；负数的补码是负数绝对值的反码加1,利用补码计算

			按位非(not) ~ 本质是操作数的负值减一 比如： ~12  -13
			按位与(and) & 相同位都为1，对应位才能为1
			按位或(or) |  相同位上有1，对应位为1
			按位异或(xor) ^ 相同位上相同，对应为为0
			左移 <<     所有位相左移动一位，符号位不变
			有符号右移 >>   所有位相右移动一位，符号位不变,空位用符号位填充
			无符号右移 >>>  符号位也跟着右移，空位用0填充。
		

		布尔操作符 ：操作任何类型的数据

			非 ！返回布尔值  			  

			与 && 如果有一个操作数不是布尔值，不一定返回布尔值
				逻辑与属于短路操作。
					如果第一个操作是null, 返回null
					如果第一个操作是NaN, 返回NaN
					如果第一个操作是undefinded, 返回undefinded
					如果第一个操作数不是上面的值，返回第二个值

			或 ||  效果同逻辑与
				应用   var myObject = preperredObject || backupObject;  //如果前面的值不为空用前面的值，如果为空用后面的值

		乘性操作符：乘，除，取模
		乘性操作符： 加，减
				加法：如果两个操作数都是字符串，字符串拼接起来
					  如果只有一个操作数是字符串，则将另一个操作数转化为字符串然后拼接起来
					  如果有一个操作数是对象、数值、布尔值，则调用他们的toString()方法；如果是undefined,null 会调用String()方法转换为对应的字符串	
		
		关系操作符：
					




 





