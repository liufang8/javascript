可维护代码：
	易理解: 其他人可以接手代码并理解他的意图。
	直观性： 一看就明白
	适应性：发生变动修改小
	可拓展：对核心功能拓展
	可调式：出错给出足够的信息

	代码约定： 对代码书写格式要求。

		可读性：
			。缩进  通常使用若干空格【通常为4】而非制表符，因为制表符在不同的文本编辑器中显示效果不同。		
			。注释
				- 每个方法都应有一个注释。描述其目的和可能用到的算法；参数和返回值也很重要。
				- 描述一个任务的大段代码。 	
				- 复杂的算法
				- Hack 描述解决的特殊浏览器问题

		函数和变量的命名： 增加代码的可理解和可维护，阅读代码像讲故事一样。
			。变量名应为名词
			。函数应该以动词开头
			。变量和函数都应使用合乎逻辑的名字，不要担心过长

		变量类型透明：
			。初始化
			。使用匈牙利标记法指明变量的类型。
			    -'o' 对象
			    -'s' 字符串
			    -'i' 整数
			    -'f' 浮点数
			    -'b' 布尔型

	松散耦合： 直接引用一个对象，修改一个的同时要修改另一个。	
		
		。javascript/html解耦
		    -不要在html文件中写javascript，放到外部文件
		    -不要在javascript中插入大量html代码，可以在html中先隐藏，或者ajax请求获取。
		
		。javascript/css解耦
		    -更改类而不是样式。
		    -不要再css中嵌入表达式，这样浏览器不兼容

		。事件处理和应用逻辑解耦
			将业务逻辑和事件分离。这样很容易在没有事件的情况下测试代码，容易创建单元测试和自动化流程应用。
			-不要将event对象传递给其他方法，只传递event的数据
			-任何应用层面的事件都可以在不执行事件的情况下进行
			-任何事件处理程序都应该处理事件，然后将处理交给应用逻辑


	编程实践：

		。尊重对象：如果你不负责对象的创建和维护就不要为实例和原型添加新的方法和属性，不要覆盖默认方法
			-可以创建包含所需功能的新对象，然后与他们交互
			-创建自定义类型，继承需要修改的类型，然后为自定义类型添加新的方法。

        。避免全局变量
        	-最多创建一个全局变量，其他的变量和函数寄存其中
        	-命名空间，YAHOO.util.Dom

        。避免与null比较
        	-如果是引用类使用instanceof比较
        	-如果是基本类型使用typeof比较
        	-如果是函数使用typeof比较

        。使用常量	
        	-每个单词大写，并且单词中间用下划线连接
        	-可以放在单独的文件中
        	-方便国际化设置
        	-下列情况：
 				#重复值
 				#用户界面字符串，显示给用户的字符串
 				#urls, urls很容易变化，推荐在一个公用的地方存放所有的url
 				#任何可能更改的值，在使用字面量的时候，如值在未来发生变动，用常量



性能

	。作用域
		-避免全局查找，查找全局变量耗费时间长。
			var imgs = document.getElementsByTagName("img");
			for(var i=0, len= imgs.length; i < len; i++){
				imgs[i].title = document.title + "i";
			}
			//将全局变量保存在本地变量中
			//var doc = document;  
	
	。选择正确方法

		-属性查询要在原型链上搜索，所以时间较长。
			var url =  window.location.href;
			var query = url.substring(url.indexof("?"));

		-循环优化	
			#减值迭代，从最大值开始，不用每次计算length
			#优化循环体
			#优化终止条件

		-展开循环	
			#消除循环使用多次函数调用
				process(0);process(1);

		-避免双重解释
			eval('alert("hello")') -> alert("hello")
			setTimeout("alert('hello')", 100) -> setTimeout(function(){alert('hello')},100)		
			var sayHi = new Function("alert('hello')") -> var sayHi = function(){ alert('hello')}
			第一种方式不可能一开始就解析，要实例化一个解析器来解析代码，初始化解析器的开销很大

		-其他
			#使用原生方法
			#switch比多个if快，按照最可能到最不可能的顺序排序
			#位运算符快


	最小化语句数
		语句的数量也影响执行的速度。完成多个操作的单个语句要比完成单个操作的多个语句块。

		。多个变量声明	
			var count = 5;
			var color = 'blue';
			|改成下面的|
			var count = 5,
				color = 'blue';

		。插入迭代值
			var name = value[i];
			i++;
			|改成下面的|
			var name = value[i++];

		。使用数组和对象字面量					
			var values = [1,3,4];
			var person = {
				name: 'zhang',
				age: 12
			}



	优化DOM
		在javascript中dom操作是最慢的，因为他们往往需要重新渲染整个页面或者部分。

		。最小化现场更新
			-使用dom碎片【DocumentFragment】,碎片本身不会被添加到节点中。
		    -使用innerHTML 操作多个dom速度更快

		。事件代理
			页面上注册的事件越多，响应用户交互的速度越低。
			事件代理用到了事件冒泡，冒泡的事件不仅本身可以处理，任何祖先的元素都可以处理。

		。注意HTMLCollection    
			访问HTMLCollection的属性和方法都是进行一次查询，所以要减少它的访问次数。



部署			
	
	构建过程：	
		。不能将源代码发布原因：
			-知识产权问题： 别人看到源代码很容易知道你的意图，对它再利用，并且有可能找到安全漏洞。
			-文件大小：含有空白字符，冗长的函数名和变量名
			-代码组织：

		。要定义文件和目录结构，并确定哪些要出现在部署文件中，就可以创建构建系统了。
		构建工具： ant

	验证：语法错误，和常见的编码错误。
		。工具JSLint： 可以在线使用，也可以基于java命令行
			-eval()的使用
			-没声明使用变量
			-遗漏分号
			-错误的逗号使用
			-不恰当的换行
			-switch中遗漏break
			-重复声明的变量

	压缩：
		。一般包括如下步骤
			-删除额外的空白
			-删除注释
			-缩短变量名
		
		。工具:YUI
		
		。http压缩		
 			 服务器压缩代码，浏览器查看http头确定是否被压缩，然后选择相应的格式解压。			


		    		