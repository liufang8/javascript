	
	Object类型：
		
		创建实例
			1.var obj = new Object()
			2.var obj = {'name':'he', age:12};

			通过点访问  obj.name 	
			通过[]访问  obj["name"]   
			注 变量 或者不符合规范的命名可以通过[]

	

	Array 可以包含任意类型的值,动态增加值

		创建：两种方式

			1. var colors = new Array() //空数字
			   var colors = new Array(10) //长度为10
			 注var colors = new Array(1) //长度为1，不能创建为1数子项的数组 
			 注var colors = new Array(1,2) //项为1,2 
			   var colors = new Array("red", "blue"); //两项
			   var colors = Array("red"); //可以不用new

			2.
				var colors = [1];  //创建数据项为1   
				var colors = [1,]  //创建数据项为1


		访问： 通过下表访问数组
			未超出下标： 返回对应的值 ;  超出下标： 返回undefined

		修改：	未超出下标： 修改对应的值 ;  超出下标： 增加相应的长度，
			var colors = ['red','black','blue'];
			colors[3] = 'green'; 
			colors.length  //4

		length: 数组的长度，通过length增加、删除数组
			var colors = ['red','black','blue'];
			colors.length = 2; 
			colors[2]        //undefined

			colors.length = 3;  //增加一项
			colors[colors.length] = 'green';  //增加一项


		检测数组：
			单页面  colors instanceof Array
			多框架  Array.isArray()


		转换字符串方法：
			toString()  //通过逗号连接每一项
			join("")	

		栈方法： push(), pop()
		队列方法: push(), shift()

		concat 连接数组
		slice  分割数组
		splice 增删改（强大）

		位置 : 参数 要查找的数组 和开始的位置，找不到返回-1，找到返回所在的位置
			indexOf()   //从开头查找
			lastIndexOf() //从尾部查找


		迭代方法：forEach map filter every some
			每个方法接受两个参数：在每一项上运行的函数和运行该函数的作用域对象（option）
			传入的方法中接受3个参数：数组项的值， 该项在数组的位置和数组本身

			//是否每个值都满足条件
			var everyResult = numbers.every(function(item, index,array){
			   return item > 2;
			});
			everyResult          //false

			//是否有一些值满足条件
			var someResult = numbers.some(function(item, index,array){
			   return item > 2;
			});
			someResult           //true

			//返回满足条件的项
			var filterResult = numbers.filter(function(item, index,array){
			     return  item > 2;
			 });
			filterResult         //[3, 4, 5, 4, 3]

			//返回处理的每一项
			var mapResult = numbers.map(function(item, index, array){ 
			   return item * 2;
			});
			mapResult             //[2, 4, 6, 8, 10, 8, 6, 4, 2]

			//对每一项执行某些操作
			numbers.forEach(function(item, index, array){
			   //执行某些操作,没有返回值
			});


		缩小方法： reduce, reduceRight
			都迭代所有的项，然后构建一个最终返回的值。
			reduce() 从数组的开头遍历到最后
			reduceRight() 从数组的最后一项开始向前遍历到第一项。
			每个函数接收两个参数：一个在每一项上调用的函数和作为缩小基础的初始值(option)
			传入函数接受4个参数：前一个值，当前值，项的索引，数组对象。这个函数返回的值都自动作为第一个参数传给下一项
			第一次迭代发生在数组的第二项上（第一个参数是第一项，第二个参数是第二项）

			var sum = numbers.reduce(function(pre, cur, index, array){
			  console.log(pre, cur, index);
			  return pre + cur;
			});
			sum                //15




	Date(日期)
		Date类型使用自UTC(Coordinated Universal Time, 国际协调时间)1970年1月1日零时开始经历的毫秒数来保存日期。
		UTC1970是时区为0的时间比如伦敦。
		
		var startUTC = new Date(Date.UTC(1970,0)); 
		startUTC.getTime()  //0

		var startLocal = new Date(1970,0); 
		startLocal.getTime()  //-28800000 = -28800000/(1000*3600)=-8

		创建日期对象:
			
			UTC时间：
				var nowUTC = new Date(Date.UTC(2016,10,26,6,15,10));
				nowUTC  //Sat Nov 26 2016 14:15:10 GMT+0800 (中国标准时间)
				
				var d1 = new Date('2016-11-26T07:14:20') 
				d1     //Sat Nov 26 2016 15:14:20 GMT+0800 (中国标准时间)
			
			
			当地时间
				var now = new Date();  //现在时间
				
				var d1 = new Date('2014/12/25 12:00:00'); 
				d1   // Thu Dec 25 2014 12:00:00 GMT+0800 (China Standard Time)

				var d1 = new Date('2014-12-25 12:00:00');  这中格式和上面的主要区别是上面每位数字必须是两位比如00，中间有字母(T或t) 
				d1   // Thu Dec 25 2014 12:00:00 GMT+0800 (China Standard Time)
				
				var d2 = new Date(2016, 10, 26,7,14,20)
				d2     //Sat Nov 26 2016 07:14:20 GMT+0800 (中国标准时间)
				
				var d3 = new Date('November 26, 2016 07: 14: 20')
				d3     //Sat Nov 26 2016 07:14:20 GMT+0800 (中国标准时间)
				
			注意:不使用new 直接Date()没有参数，将返回现在时间字符串，而不是日期对象。
				
            
         方法：
         	Date.parse() //解析一个表示日期的字符串，并返回从1970-1-1 00:00:00经历的毫秒数 。字符串和创建时一样。
         	Date.now()	 // 从1970-1-1 00:00:00经历的毫秒数
         	Date.UTC()   //参数为（2-7），返回从1970-1-1 00:00:00经历的毫秒数

        实例方法：
         	
         	getTimezoneOffset()  //返回协调世界时（UTC）相对于当前时区的时间差值， 单位分钟
         	getFullYear() //根据本地时间返回指定日期对象的年份（四位数字）
         	getMonth()  //根据本地时间返回指定日期对象的月份（0-11）
         	getDate()   //根据本地时间返回指定日期对象的月份中第几天（1-31）
         	getDay()    //根据本地时间返回指定日期对象的星期中第几天（0-6）
         	getHours()  //根据本地时间返回指定日期对象的小时（0-23）
         	getMinutes() //根据本地时间返回指定日期对象的分钟（0-59）
         	getSeconds() //根据本地时间返回指定日期对象的秒数（0-59）
            getTime()    //返回从1970-1-1 00:00:00 UTC（协调世界时）到该日期经过的毫秒数.
            valueOf()    //返回从1970-1-1 00:00:00 UTC（协调世界时）到该日期经过的毫秒数.

        日期大小的比较: 先调用valueOf()方法，根据返回值比较，如果没有valueOf方法调用toString()方法根据返回值比较
        	var d1 = new Date(2010,1);
        	var d2 = new Date(2011,1);
        	d1 > d2;  //false
        	d2 > d1;  //true

        

        正则表达式：

        	var expression = /pattern/flags;
        	flags: g/i/m
        	使用正则表达式字面量和调用RegExp一样每次都创建一个实例。


        	实例属性：
        		global: 是否设置了g标志
        		ignoreCase；是否设置了i标志
        		multiline: 布尔值，是否设置了m标志。
        		lastIndex: 整数，表示开始搜索下一个匹配项的位置，从0算起。
        		source: 正则表达式的字符串表示

        	实例方法：
        		exec(stringSource)专门为捕获组而设计，返回包含第一个匹配项信息的数组，没有匹配返回null
	        		返回的数组还包含两个额外的属性：index和input。
	        		index 匹配项在字符串中的位置。
	        		input 应用正则表达式的字符串。

	        		var text = 'mom and dad and baby';
					var pattern = /mom( and dad( and baby)?)?/gi;
					var matches = pattern.exec(text);

					matches.input   //'mom and dad and baby';
					matches.index   //0
					matches[0]	 //mom and dad and baby 整个字符串
					matches[0]	 //and dad and baby     第一个捕获组
					matches[0]	 //and baby             第二个捕获组


					在没有设置全局标志的情况下，在同一个字符串上多次执行exec()始终返回第一个匹配项信息
					在有全局标志的情况下，每次执行只返回一个匹配项，并从下一项开始执行。
					

					var text = 'cat, bat, sat, fat';
					var pattern = /.at/;
					var matches = pattern.exec(text);
					matches.index;                //0
					pattern.lastIndex;            //0

					matches = pattern.exec(text);
					matches.index;                //0
					pattern.lastIndex;            //0



					var text = 'cat, bat, sat, fat';
					var pattern = /.at/g;
					var matches = pattern.exec(text);
					matches.index;                //0
					pattern.lastIndex             //3 下一次开始执行的位置
					matches[0]                    //"cat"

					matches = pattern.exec(text);
					matches[0]                    //"bat"
					matches.index                 //5
					pattern.lastIndex             //8
 

				test() 只接受一个字符串参数，在模式和该参数匹配的情况下返回true,否则返回false
					
					var text = '000-00-000';
					var pattern = /\d{3}-\d{2}-\d{3}/;
					if(pattern.test(text)){
						console.log("the pattern was matched");						
					}

				toString()   返回正则表达式的字符串表示
				valueOf()    返回正则表达式本身


				RegExp构造函数属性
					input             最近一次要匹配的字符串
					lastMatch         最近一次的匹配项
					lastParen         最近一次的捕获组
					leftContext       input字符串中lastMatch之前的文本 
					rightContext      input字符串中lastMatch之后的文本 
					multiline         布尔值，是否所有的表达式都使用多行模式

				var text = 'this has been a short summer';
				var pattern = /(.)hort/g;

				if(pattern.test(text)){
					console.log(RegExp.input);				//this has been a short summer
					console.log(RegExp.leftContext);		//this has been a 		
					console.log(RegExp.rightContext);		// summer		
					console.log(RegExp.lastMatch);			//short	
					console.log(RegExp.lastParen);			//s	
					console.log(RegExp.multiline);			//false	
				}	 
	 



		Function类型
			函数也是对象，没给对象是Function类型的实例。所以下面两种方式差不多
				function sum(num1, num2){ return num1 + num2;}  //函数声明
				var sum = function(num1,num2){return num1 + num2;};  //函数表达式

				不同:
					sum(10,10);
					function sum(num1, num2){return num1 + num2}; //20
					js引擎会把函数声明提到顶部。

					sum(10,10);		                                    //报错不会执行
					var sum = function(num1,num2){return num1 + num2;}; 

			内部属性 this arguments
				arguments.callee 指向拥有arguments对象的的函数
				this指向函数的调用者

				window.color = 'red';
				var o = {color: 'blue'};
				function sayColor(){
					console.log(this.color);
				}		
				sayColor();  //red
				o.sayColor = sayColor;
				o.sayColor(); //blue

				caller: 保存调用当前函数的函数的引用
				function outer(){ inner();}
				function inner(){ console.log(inner.caller);}
				outer()     //funtion outer(){ inner();}

				length: 函数希望接受命名参数的个数。
				prototype: 保存所有实例方法的真正所在

				
				方法绑定：apply,call,bind
				apply：要绑定的对象，数组参数
				call: 要绑定的对象，每个参数
				bind：要绑定的对象，返回已绑定对象的函数。

		基本包装类型：
			String:
				var s1 = "some text";		
				var s2 = s1.substring(2);  //实际上是 var s1 = new String("some text"); var s2 = s1.substring(2); s1 = null;

			使用new调用基本类型的构造函数和直接调用转型的同名函数是不一样的。
			var value = 25;
			var number = Number(value);
			typeof number //number

			var obj = new Number(value);
			typeof obj //object

			Boolean
			使用Boolean对象创建对象，在布尔表达式中使用布尔对象回个人造成困惑。
			var falseObj = new Boolean(false);
			var result = flaseObj && true
			result  //true

			var falseValue = false;
			var result = falseValue && true 
			result //false

			Number:
				toFixed(1) //将数字转化为字符串，制定小数位数。
				toExponential(1) //返回指定小数位数的指数表示形式。
				toPrecision() //返回指定位所哟位数的指数或者固定位数的表示形式。

			String:
				访问字符的方法：
					charAt(i)  //在指定位置的字符
					charCodeAt(i) //在制定位置的字符编码
					string[0]  //通过下表访问

				连接字符串  
					concat :后接多个参数
					  + 		

				子字符串：
					slice  第一个参数指定子字符串的开始位置，第二个参数制定结束为止，如果是负数加上数组长度。
					substr  第一个参数指定开始位置，第二个参数字符串的个数，如果美哟制定结束为止，则以结束位置结束。
							如果第一个为负数加上数组的长度，如果第二个为负数转化为0
					substring	 第一个参数指定子字符串的开始位置，第二个参数制定结束为止。
						    所有负参数都转化为0   

				位置方法： indexOf lastIndexOf()
					返回指定字符串在源字符串的位置，第二个参数是开始搜索的位置。

				trim(): 清除字符串前后的空格。

				转换大小：
					toLowerCase()  
					toUpperCase()

				模式匹配：
					match(pattern)  //返回一个数组。第一项是与整个匹配模式匹配的字符串，第二项是与正则表达式捕获组匹配的项。	
					search(pattern) //返回查找的位置，如果没有找到返回-1
					replace(pattern, 要替换为的字符串或者函数) 如果是函数参数为（模式匹配项，匹配项在字符串中的位置，原始字符串）
					split(pattern, array.length) //第二个数组的长度，返回一个数组	

					function htmlEscapse(html){
						var pattern = /[<>"&]/g;
						return html.replace(pattern, function(match, pos, text){
							switch(match) {
								case ">": return '&gt';break;
								case "<": return '&lt';break;
								case "&": return '&quot';break;
								case "\"": return '&amp';break;
							}
						});
					}

					var p = "<p class=\"greeting\">hello world!</p>";
					var result = htmlEscapse(p); 

					localeCompare: 比较
					构造函数静态的方法： String.fromCharCode(104,101,108,108,111); //hello


					动态格式化字符串的方法： 尽量不要用
						'hello'.big()         //"<big>hello</big>"
						'hello'.anchor('baidu')  //"<a name="baidu">hello</a>"


			单体内置对象：Global Math
				Global对象是终极全局变量，任何不是其他对象的属性或者方法都是他的属性和方法。
					在浏览器中作为window的一部分来实现。
				
				URI编码： 使用utf-8对URI中的特殊字符进行编码。非特殊字符（字母，数字，.,  _);s
					encodeURI: 对整个url进行编码，不会对本身特殊字符（/:？#）进行编码
					encodeURIComponent: 对局部进行编码，对所有的字符进行编码。

					var uri = 'http://www.wrox.com/illagal value.html#start'; //空格属于特殊字符
					encodeURI(uri)                //"http://www.wrox.com/illagal%20value.html#start" //编码后%20
					encodeURIComponent(uri)       //"http%3A%2F%2Fwww.wrox.com%2Fillagal%20value.html%23start"

				eval: 参数要执行的javascript代码，包含的代码被认为是执行环境的一部分。
					在严格模式下不能使用eval


				math 
					max： 求最大值
						Math.max.apply(null, [1,3,6,12]);  //避免多余的循环

					舍入方法： ceil, floor, round
					ceil: 向上舍入最接近的整数
					floor: 向下舍入最接近的整数
					round: 四舍五入最接近的整数
					random: 0-1(不包括0和1)之间的随机数
					
					套用下面的公式可以从整数的范围内随机取一个值
					值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)	


					































